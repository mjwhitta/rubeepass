#!/usr/bin/env ruby

require "djinni"
require "hilighter"
require "io/console"
require "jsoncfg"
require "optparse"
require "pathname"
require "rubeepass"

class RubeePassExit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    EXTRA_ARGUMENTS = 4
    EXCEPTION = 5
    AMBIGUOUS_ARGUMENT = 6
end

class RubeePassConfig < JSONConfig
    extend JSONConfig::Keys

    add_key("kdbx")
    add_key("keyfile")
    add_key("timeout")

    def initialize(file = nil)
        file ||= "~/.config/rubeepass/rc"
        @defaults = {
            "kdbx" => nil,
            "keyfile" => nil,
            "timeout" => 10
        }
        super(file)
    end
end

def get_password
    print "Enter password: "
    passwd = STDIN.noecho(&:gets)
    puts
    return passwd.chomp
end

def parse(args)
    options = Hash.new
    options["command"] = nil
    options["config"] = RubeePassConfig.new
    options["export_file"] = nil
    options["export_format"] = "xml"
    options["password"] = nil
    options["verbose"] = false

    info = "KeePass 2.x read-only client."

    parser = OptionParser.new do |opts|
        opts.summary_width = 26

        opts.banner = "Usage: #{File.basename($0)} [OPTIONS] [kdbx]"

        opts.on("", "DESCRIPTION")

        info.scan(/\S.{0,66}\S(?=\s|$)|\S+/).each do |line|
            opts.on("    #{line}")
        end

        opts.on("", "OPTIONS")

        opts.on(
            "-c",
            "--command=COMMAND",
            "Run a command then exit"
        ) do |command|
            options["command"] = command
        end

        opts.on(
            "-e",
            "--export=FILE",
            "Export database to file"
        ) do |file|
            options["export_file"] = file
        end

        opts.on(
            "-f",
            "--format=FORMAT",
            [ "gzip", "xml" ],
            "Specify format to use when exporting (default:",
            "xml)"
        ) do |format|
            options["export_format"] = format
        end

        opts.on("-h", "--help", "Display this help message") do
            puts opts
            exit RubeePassExit::GOOD
        end

        opts.on(
            "-k",
            "--keyfile=KEYFILE",
            "Use specified keyfile"
        ) do |keyfile|
            k = Pathname.new(keyfile).expand_path
            options["config"].set_keyfile(k)
        end

        opts.on("--nocolor", "Disable colorized output") do
            Hilighter.disable
        end

        opts.on(
            "-p",
            "--password=PASSWORD",
            "Use specified password or read password from file"
        ) do |password|
            options["password"] = password
        end

        opts.on(
            "-t",
            "--timeout=TIMEOUT",
            Integer,
            "Clipboard timeout"
        ) do |t|
            options["config"].set_timeout(t)
        end

        opts.on(
            "-v",
            "--verbose",
            "Show backtrace when error occurs"
        ) do
            options["verbose"] = true
        end

        opts.on("-V", "--version", "Show version") do
            __FILE__.match(/rubeepass-(\d+\.\d+\.\d+)/) do |m|
                puts m[1]
            end
            exit RubeePassExit::GOOD
        end

        opts.on(
            "",
            "FORMATS",
            "    gzip",
            "    xml"
        )
    end

    begin
        parser.parse!
    rescue OptionParser::InvalidOption => e
        puts e.message
        puts parser
        exit RubeePassExit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts e.message
        puts parser
        exit RubeePassExit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts e.message
        puts parser
        exit RubeePassExit::MISSING_ARGUMENT
    rescue OptionParser::AmbiguousOption => e
        puts e.message
        puts parser
        exit RubeePassExit::AMBIGUOUS_ARGUMENT
    end

    if (args.length == 1)
        k = Pathname.new(args[0]).expand_path
        options["config"].set_kdbx(k)

        # Save keyfile even if not specified
        options["config"].savediff
    elsif (args.length > 1)
        puts parser
        exit RubeePassExit::EXTRA_ARGUMENTS
    end

    # Throw error if kdbx not specified or in config
    if (!options["config"].kdbx?)
        puts parser
        exit RubeePassExit::MISSING_ARGUMENT
    end

    return options
end

options = parse(ARGV)

begin
    rc = options["config"]
    kdbx = Pathname.new(rc.get_kdbx).expand_path
    password = options["password"] || get_password
    keyfile = nil
    if (rc.keyfile?)
        keyfile = Pathname.new(rc.get_keyfile).expand_path
    end

    # Read password from file if filename was provided
    pfile = Pathname.new(password).expand_path
    password = pfile.read.chomp if (pfile.exist?)

    keepass = RubeePass.new(
        kdbx,
        password,
        keyfile,
        !Hilighter.disable?
    )

    loop do
        begin
            if (options["export_file"])
                keepass.export(
                    options["export_file"],
                    options["export_format"]
                )
                exit RubeePassExit::GOOD
            else
                keepass.open
            end
            break
        rescue RubeePass::Error::InvalidPassword => e
            puts e.message
            password = get_password
            keepass = RubeePass.new(
                kdbx,
                password,
                keyfile,
                !Hilighter.disable?
            )
        end
    end

    djinni = Djinni.new
    djinni.load_wishes(
        "#{File.dirname(__FILE__)}/../lib/rubeepass/wish"
    )

    if (options["command"])
        djinni.grant_wish(
            "#{options["command"].chomp}\n",
            {
                "keepass" => keepass,
                "cwd" => keepass.db,
                "clipboard_timeout" => options["config"].get_timeout
            }
        )
        keepass.wait_to_exit
    else
        djinni.prompt(
            {
                "keepass" => keepass,
                "cwd" => keepass.db,
                "clipboard_timeout" => options["config"].get_timeout,
                "prompt_color" => "light_white"
            },
            "rpass:/> ".light_white
        )
    end
rescue SystemExit
    # Quit from djinni
    # Exit gracefully
rescue Interrupt
    # Exit gracefully on ^C
rescue Errno::EPIPE
    # Do nothing. This can happen if piping to another program such as
    # less. Usually if less is closed before we're done with STDOUT.
rescue RubeePass::Error => e
    $stderr.puts e.message.red
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line.yellow
        end
    end
    exit RubeePassExit::EXCEPTION
rescue Exception => e
    $stderr.puts [
        "Oops! Looks like an error has occured! If the error",
        "persists, file a bug at:"
    ].join(" ").wrap
    $stderr.puts
    $stderr.puts "    https://github.com/mjwhitta/rubeepass/issues"
    $stderr.puts
    $stderr.puts [
        "Maybe the message below will help. If not, you can use the",
        "--verbose flag to get a backtrace."
    ].join(" ").wrap
    $stderr.puts

    $stderr.puts e.message.white.on_red
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line.light_yellow
        end
    end
    exit RubeePassExit::EXCEPTION
ensure
    if (keepass)
        keepass.clear_clipboard
        keepass.wait_to_exit
    end
end
exit RubeePassExit::GOOD
