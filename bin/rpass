#!/usr/bin/env ruby

require "djinni"
require "hilighter"
require "io/console"
require "json_config"
require "optparse"
require "pathname"
require "rubeepass"

class RubeePassExit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    EXTRA_ARGUMENTS = 4
    EXCEPTION = 5
    AMBIGUOUS_ARGUMENT = 6
end

class RubeePassConfig < JSONConfig
    def default_config
        set("last_kdbx", nil)
        set("last_keyfile", nil)
        set("timeout", 10)
    end

    def last_kdbx(kdbx = nil)
        set("last_kdbx", Pathname.new(kdbx).expand_path) if (kdbx)
        kdbx = get("last_kdbx").to_s
        return nil if (kdbx.nil? || kdbx.empty?)
        return kdbx
    end

    def last_keyfile(kf = nil)
        file = nil
        file = Pathname.new(kf).expand_path if (kf && !kf.empty?)
        set("last_keyfile", file) if (kf)
        kf = get("last_keyfile").to_s
        return nil if (kf.nil? || kf.empty?)
        return kf
    end

    def timeout(t = nil)
        set("timeout", t) if (t)
        t = get("timeout")
        case t.to_s
        when /[0-9]+/
            return t.to_i
        else
            return nil
        end
    end
end

def get_password
    print "Enter password: "
    passwd = STDIN.noecho(&:gets)
    puts
    return passwd.chomp
end

def parse(args)
    options = Hash.new
    options["command"] = nil
    options["export_file"] = nil
    options["export_format"] = "xml"
    options["password"] = nil
    options["keyfile"] = nil
    options["timeout"] = nil
    options["verbose"] = false

    parser = OptionParser.new do |opts|
        opts.summary_width = 24

        opts.banner = "Usage: #{File.basename($0)} [OPTIONS] [kdbx]"

        opts.on(
            "-c",
            "--command=COMMAND",
            "Run a command then exit"
        ) do |command|
            options["command"] = command
        end

        opts.on(
            "-e",
            "--export=FILE",
            "Export database to file"
        ) do |file|
            options["export_file"] = file
        end

        opts.on(
            "-f",
            "--format=FORMAT",
            [ "gzip", "xml" ],
            "Specify format to use when exporting (default: xml)"
        ) do |format|
            options["export_format"] = format
        end

        opts.on("-h", "--help", "Display this help message") do
            puts opts
            exit RubeePassExit::GOOD
        end

        opts.on(
            "-k",
            "--keyfile=KEYFILE",
            "Use specified keyfile"
        ) do |keyfile|
            options["keyfile"] = keyfile
        end

        opts.on("--nocolor", "Disable colorized output") do
            Hilighter.disable
        end

        opts.on(
            "-p",
            "--password=PASSWORD",
            "Use specified password (will prompt if not provided)"
        ) do |password|
            options["password"] = password
        end

        opts.on("-t", "--timeout=TIMEOUT", "Clipboard timeout") do |t|
            options["timeout"] = t.to_i
        end

        opts.on(
            "-v",
            "--verbose",
            "Show backtrace when error occurs"
        ) do
            options["verbose"] = true
        end

        opts.on(
            "",
            "FORMATS",
            "    gzip",
            "    xml"
        )
    end

    begin
        parser.parse!
    rescue OptionParser::InvalidOption => e
        puts e.message
        puts parser
        exit RubeePassExit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts e.message
        puts parser
        exit RubeePassExit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts e.message
        puts parser
        exit RubeePassExit::MISSING_ARGUMENT
    rescue OptionParser::AmbiguousOption => e
        puts e.message
        puts parser
        exit RubeePassExit::AMBIGUOUS_ARGUMENT
    end

    if (args.length > 1)
        puts parser
        exit RubeePassExit::EXTRA_ARGUMENTS
    end

    # Read config
    rc = RubeePassConfig.new("~/.rpassrc")

    # Determine kdbx and keyfile
    if (args.length == 1)
        # Use specified kdbx (and keyfile if specified)
        options["kdbx"] = args[0]
        options["keyfile"] ||= ""
    else
        # Use kdbx from config if stored
        if (rc.last_kdbx)
            options["kdbx"] = rc.last_kdbx
        end

        # Use keyfile from config if stored and not specified already
        if (options["keyfile"].nil?)
            if (rc.last_keyfile)
                options["keyfile"] = rc.last_keyfile
            end
        end
    end

    # Determine timeout
    if (options["timeout"].nil?)
        options["timeout"] = 10
        options["timeout"] = rc.timeout if (rc.timeout)
    end

    # Throw error if kdbx not specified or in config
    if (options["kdbx"].nil?)
        puts parser
        exit RubeePassExit::MISSING_ARGUMENT
    end

    # Store data in config
    options["kdbx"] = rc.last_kdbx(options["kdbx"])
    options["keyfile"] = rc.last_keyfile(options["keyfile"])
    options["timeout"] = rc.timeout(options["timeout"])

    return options
end

options = parse(ARGV)

begin
    kdbx = options["kdbx"]
    password = options["password"] if (options["password"])
    password = get_password if (options["password"].nil?)
    keyfile = options["keyfile"]

    keepass = RubeePass.new(
        kdbx,
        password,
        keyfile,
        !Hilighter.disable?
    )

    loop do
        begin
            if (options["export_file"])
                keepass.export(
                    options["export_file"],
                    options["export_format"]
                )
                exit RubeePassExit::GOOD
            else
                keepass.open
            end
            break
        rescue RubeePass::Error::InvalidPassword => e
            puts e.message
            password = get_password
            keepass = RubeePass.new(
                kdbx,
                password,
                keyfile,
                !Hilighter.disable?
            )
        end
    end

    djinni = Djinni.new
    djinni.load_wishes(
        "#{File.dirname(__FILE__)}/../lib/rubeepass/wish"
    )

    if (options["command"])
        djinni.grant_wish(
            "#{options["command"].chomp}\n",
            {
                "keepass" => keepass,
                "cwd" => keepass.db,
                "clipboard_timeout" => options["timeout"]
            }
        )
        keepass.wait_to_exit
    else
        djinni.prompt(
            {
                "keepass" => keepass,
                "cwd" => keepass.db,
                "clipboard_timeout" => options["timeout"],
                "prompt_color" => "light_white"
            },
            "rpass:/> ".light_white
        )
    end
rescue SystemExit
    # Quit from djinni
    # Exit gracefully
rescue Interrupt
    # ^C
    # Exit gracefully
rescue Errno::EPIPE
    # Do nothing. This can happen if piping to another program such as
    # less. Usually if less is closed before we're done with STDOUT.
rescue RubeePass::Error => e
    puts e.message
    exit RubeePassExit::EXCEPTION
rescue Exception => e
    $stderr.puts
    $stderr.puts "Oops! Looks like an error has occured! If the " \
        "error persists, file a bug at:"
    $stderr.puts
    $stderr.puts "    https://gitlab.com/mjwhitta/rubeepass/issues"
    $stderr.puts
    $stderr.puts "Maybe the message below will help. If not, you " \
        "can use the --verbose flag to get"
    $stderr.puts "a backtrace."

    $stderr.puts e.message.white.on_red
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line.light_yellow
        end
    end
    exit RubeePassExit::EXCEPTION
ensure
    if (keepass)
        keepass.clear_clipboard
        keepass.wait_to_exit
    end
end
exit RubeePassExit::GOOD
